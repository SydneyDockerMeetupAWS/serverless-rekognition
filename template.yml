AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "Create Lambda functions for Rekognition"
Parameters:
  Collection:
    Type: String
    Default: noops-poc
Outputs:
  SearchLambda:
    Description: "ARN of the \"search\" Lambda function"
    Value: !GetAtt Add.Arn
  AddLambda:
    Description: "ARN of the \"add\" Lambda function"
    Value: !GetAtt Search.Arn
  Bucket:
    Description: "S3 bucket name"
    Value: !Ref ImagesBucket
  AppURL:
    Description: "Public application URL"
    Value: !Sub
      - "https://${URL}"
      - URL: !GetAtt CloudFront.DomainName


Resources:

  ServerlessCheckinApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      DefinitionBody:
            info:
              title:
                Ref: AWS::StackName
            paths:
              /lambda:
                post:
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "{\"snapshot\":\"$input.body\"}"
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Checkin.Arn}/invocations
                    passthroughBehavior: "when_no_templates"
                    httpMethod: "POST"
                    contentHandling: "CONVERT_TO_TEXT"
                    type: "aws"
                options:
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                        Access-Control-Allow-Methods:
                          type: "string"
                        Access-Control-Allow-Headers:
                          type: "string"
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,OPTIONS'"
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "{\"statusCode\": 200}"
                    passthroughBehavior: "when_no_match"
                    type: "mock"
            definitions:
              Empty:
                type: "object"
                title: "Empty Schema"

            swagger: '2.0'

# Lambda Permission
  CheckinLambdaPermissionToApiGateway:
    Type: "AWS::Lambda::Permission"
    Properties: 
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref "Checkin"
      Principal: "apigateway.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Join [ "", [ "arn:aws:execute-api:" , !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":*" ] ]

# Function to run the checkin
  Checkin:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: python2.7
      CodeUri: ./checkin
      Timeout: 15
      Role: !GetAtt CheckinExecutionRole.Arn
      Environment:
        Variables:
          SEARCH_LAMBDA_FUNCTION: !Ref Search
          BUCKET: !Ref ImagesBucket

# IAM Role for the Add Lambda function
  CheckinExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: CWLogs
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
            - Sid: LambdaExecPermissions
              Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: !GetAtt Search.Arn
            - Sid: S3Permissions
              Effect: Allow
              Action:
                - s3:*
              Resource: !Join [ "", [ "arn:aws:s3:::", !Ref ImagesBucket , "/*" ] ]

  # Function to add new image to a collection
  Add:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: python2.7
      CodeUri: ./add
      Timeout: 300
      Role: !GetAtt AddExecutionRole.Arn
      Environment:
        Variables:
          COLLECTION_ID: !Ref Collection
          USERS_TABLE: !Ref Users
      Events:
        PhotoUpload:
          Type: S3
          Properties:
            Bucket: !Ref ImagesBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: users/


  # IAM Role for the Add Lambda function
  AddExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: CWLogs
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
            - Sid: Rekognition
              Effect: Allow
              Action:
                - rekognition:IndexFaces
              Resource: "*"
            - Sid: DynamoDB
              Effect: Allow
              Action:
                - dynamodb:DescribeTable
                - dynamodb:GetItem
                - dynamodb:PutItem
              Resource: !Sub
                - "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Users}"
                - { Users: !Ref Users }

  # Fuction to add new image to a collection
  Search:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: python2.7
      CodeUri: ./search
      Timeout: 300
      Role: !GetAtt SearchExecutionRole.Arn
      Environment:
        Variables:
          COLLECTION_ID: !Ref Collection
          USERS_TABLE: !Ref Users

  # IAM Role for the Search Lambda function
  SearchExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: CWLogs
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
            - Sid: Rekognition
              Effect: Allow
              Action:
                - rekognition:SearchFaces
                - rekognition:SearchFacesByImage
              Resource: "*"
            - Sid: DynamoDB
              Effect: Allow
              Action:
                - dynamodb:DescribeTable
                - dynamodb:GetItem
              Resource: !Sub
                - "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Users}"
                - { Users: !Ref Users }

  # Bucket to store  pictures
  ImagesBucket:
    Type: AWS::S3::Bucket

  # Bucket policy
  ImagesBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref ImagesBucket
      PolicyDocument:
        Statement:
          - Sid: " Grant a read only access to the bucket"
            Effect: "Allow"
            Principal: "*"
            Action:
              - s3:GetObject
            Resource: !Sub "arn:aws:s3:::${ImagesBucket}/*"

  # DynamoDB tables
  Users:
    Type: AWS::Serverless::SimpleTable
    PrimaryKey:
      Name: id
      Type: String
    ProvisionedThroughput:
      ReadCapacityUnits: 5
      WriteCapacityUnits: 5


  # CloudFront distribution
  CloudFront:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          ViewerProtocolPolicy: allow-all
          TargetOriginId: !Sub "S3Origin-${AWS::StackName}"
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
        DefaultRootObject: "checkin.html"
        Enabled: "true"
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'
        Origins:
          - DomainName: !GetAtt ImagesBucket.DomainName
            Id: !Sub "S3Origin-${AWS::StackName}"
            OriginPath: "/webapp"
            S3OriginConfig: {}
